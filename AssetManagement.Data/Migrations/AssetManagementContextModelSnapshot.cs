// <auto-generated />
using System;
using AssetManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AssetManagement.Data.Migrations
{
    [DbContext(typeof(AssetManagementContext))]
    partial class AssetManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AssetManagement.Data.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Make")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("ServiceCycleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("Asset_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ServiceCycleId");

                    b.HasIndex("StationId");

                    b.ToTable("Asset", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Data.AssetAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id")
                        .HasName("AssetAttribute_pkey");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetAttribute", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Data.AssetCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id")
                        .HasName("AssetCategory_pkey");

                    b.ToTable("AssetCategory", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Data.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("Notification_pkey");

                    b.HasIndex("AssetId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Data.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly>("ServiceDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("Service_pkey");

                    b.HasIndex("AssetId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Data.ServiceCycle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("ServiceCycle_pkey");

                    b.ToTable("ServiceCycle", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Data.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id")
                        .HasName("Station_pkey");

                    b.ToTable("Station", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthRecoveryCodes")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("AuthenticatorKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMobileConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LockoutExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PreferredEmail")
                        .HasColumnType("text");

                    b.Property<int?>("RightsId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("TwoFactorAuthEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("User_pkey");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Data.Asset", b =>
                {
                    b.HasOne("AssetManagement.Data.AssetCategory", "Category")
                        .WithMany("Assets")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("CategoryId_fk");

                    b.HasOne("AssetManagement.Data.User", "Creator")
                        .WithMany("Assets")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("CreatorId_fk");

                    b.HasOne("AssetManagement.Data.ServiceCycle", "ServiceCycle")
                        .WithMany("Assets")
                        .HasForeignKey("ServiceCycleId")
                        .HasConstraintName("ServiceCycleId_fk");

                    b.HasOne("AssetManagement.Data.Station", "Station")
                        .WithMany("Assets")
                        .HasForeignKey("StationId")
                        .IsRequired()
                        .HasConstraintName("StationId_fk");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("ServiceCycle");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("AssetManagement.Data.AssetAttribute", b =>
                {
                    b.HasOne("AssetManagement.Data.Asset", "Asset")
                        .WithMany("AssetAttributes")
                        .HasForeignKey("AssetId")
                        .IsRequired()
                        .HasConstraintName("AssetId_fk");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("AssetManagement.Data.Notification", b =>
                {
                    b.HasOne("AssetManagement.Data.Asset", "Asset")
                        .WithMany("Notifications")
                        .HasForeignKey("AssetId")
                        .IsRequired()
                        .HasConstraintName("AssetId_fk");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("AssetManagement.Data.Service", b =>
                {
                    b.HasOne("AssetManagement.Data.Asset", "Asset")
                        .WithMany("Services")
                        .HasForeignKey("AssetId")
                        .IsRequired()
                        .HasConstraintName("AssetId_fk");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("AssetManagement.Data.Asset", b =>
                {
                    b.Navigation("AssetAttributes");

                    b.Navigation("Notifications");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("AssetManagement.Data.AssetCategory", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("AssetManagement.Data.ServiceCycle", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("AssetManagement.Data.Station", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("AssetManagement.Data.User", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
